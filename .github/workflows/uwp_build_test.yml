# This continuous integration pipeline is triggered anytime a user pushes code to the repo.
# This pipeline builds the UWP project, runs unit tests.
name: CBL UWP PR Validation

# Trigger on every master branch push and pull request
on:
  push:
    branches:
      - master
      - 'release/*'
  pull_request:
    branches:
      - '**'
    
jobs:

  build:

    strategy:
      fail-fast: false
      matrix:
      #[x86, x64] Let's do x64 only
        targetplatform: [x64]

    runs-on: windows-latest
    
    env:
      SigningCertificate: Couchbase.Lite.Tests.UWP_TemporaryKey.pfx
      Solution_Path: src\Couchbase.Lite.Tests.UWPCoverage\Couchbase.Lite.Tests.UWPCoverage.sln
      Test_Project_Path: src\Couchbase.Lite.Tests.UWPCoverage\Couchbase.Lite.Tests.UWPCoverage.csproj
      Cbl_Project_Path: src\Couchbase.Lite\Couchbase.Lite.csproj
      UwpSupport_Project_Directory: src\Couchbase.Lite.Support.UWP\Couchbase.Lite.Support.UWP.csproj
      NetDesktopSupport_Project_Name: src\Couchbase.Lite.Support.NetDesktop\Couchbase.Lite.Support.NetDesktop.csproj
      Solution_Directory: src\Couchbase.Lite.Tests\UWPCoverage\Couchbase.Lite.Tests

    steps:
    
    - uses: actions/checkout@v1
    - name: Run PowerShell script
      run: pwsh -command ".\$GITHUB_WORKSPACE\uwp_build_test.ps1"
        
#### BUILD

    # Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
        
    # Restore the solution
    - name: Restore Projects
      run:  msbuild $env:Solution_Path /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
      env:
        Configuration: Debug
        RuntimeIdentifier: win-${{ matrix.targetplatform }}
        
    # Build the test project
    - name: Build Test Project
      run: msbuild $env:Test_Project_Path /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier /t:Rebuild
      env:
        Configuration: Debug
        RuntimeIdentifier: win-${{ matrix.targetplatform }}
        
    # Decode the Base64 encoded Pfx
    #- name: Decode the Pfx
    #  run: |
    #    $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
    #    $currentDirectory = Get-Location
    #    $certificatePath = Join-Path -Path $currentDirectory -ChildPath $env:Solution_Directory -AdditionalChildPath $env:SigningCertificate
    #    [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    

    # Tests
    
    # Locate vstest.console.exe and add to PATH
    - name: Setup VSTest path
      uses: darenm/Setup-VSTest@v1
      
    # Run VSTest
    - name: Run VSTest
      working-directory: $\src\Couchbase.Lite.Tests.UWPCoverage\bin\x64\Debug\AppX\
      run: vstest.console.exe /Platform:x64 .\Couchbase.Lite.Tests.UWPCoverage.dll
      
    #msbuild /p:Configuration=Debug /p:Platform=x64 /t:Rebuild Couchbase.Lite.Tests.UWP.csproj || goto :error
    #vstest.console.exe /InIsolation /Platform:x64 AppPackages\Couchbase.Lite.Tests.UWP_1.0.0.0_x64_Debug_Test\Couchbase.Lite.Tests.UWP_1.0.0.0_x64_Debug.appx /Logger:trx /diag:diagnostic.txt || goto :error
    
      
